// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// toTime
StringVector toTime(NumericVector prmSeconds);
RcppExport SEXP _XCTrackerCpp4_toTime(SEXP prmSecondsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type prmSeconds(prmSecondsSEXP);
    rcpp_result_gen = Rcpp::wrap(toTime(prmSeconds));
    return rcpp_result_gen;
END_RCPP
}
// gradeToInt
IntegerVector gradeToInt(StringVector grades);
RcppExport SEXP _XCTrackerCpp4_gradeToInt(SEXP gradesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type grades(gradesSEXP);
    rcpp_result_gen = Rcpp::wrap(gradeToInt(grades));
    return rcpp_result_gen;
END_RCPP
}
// inSeconds
NumericVector inSeconds(StringVector raceTimes);
RcppExport SEXP _XCTrackerCpp4_inSeconds(SEXP raceTimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type raceTimes(raceTimesSEXP);
    rcpp_result_gen = Rcpp::wrap(inSeconds(raceTimes));
    return rcpp_result_gen;
END_RCPP
}
// milePace
StringVector milePace(StringVector raceTime, double distance);
RcppExport SEXP _XCTrackerCpp4_milePace(SEXP raceTimeSEXP, SEXP distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type raceTime(raceTimeSEXP);
    Rcpp::traits::input_parameter< double >::type distance(distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(milePace(raceTime, distance));
    return rcpp_result_gen;
END_RCPP
}
// timeDifference
StringVector timeDifference(CharacterVector lowerTime, CharacterVector higherTime);
RcppExport SEXP _XCTrackerCpp4_timeDifference(SEXP lowerTimeSEXP, SEXP higherTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type lowerTime(lowerTimeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type higherTime(higherTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(timeDifference(lowerTime, higherTime));
    return rcpp_result_gen;
END_RCPP
}
// sumOfFive
int sumOfFive(IntegerVector places);
RcppExport SEXP _XCTrackerCpp4_sumOfFive(SEXP placesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type places(placesSEXP);
    rcpp_result_gen = Rcpp::wrap(sumOfFive(places));
    return rcpp_result_gen;
END_RCPP
}
// placeDot
std::string placeDot(std::string word);
RcppExport SEXP _XCTrackerCpp4_placeDot(SEXP wordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type word(wordSEXP);
    rcpp_result_gen = Rcpp::wrap(placeDot(word));
    return rcpp_result_gen;
END_RCPP
}
// placeDotC
std::string placeDotC(std::string word);
RcppExport SEXP _XCTrackerCpp4_placeDotC(SEXP wordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type word(wordSEXP);
    rcpp_result_gen = Rcpp::wrap(placeDotC(word));
    return rcpp_result_gen;
END_RCPP
}
// scoreDot
std::string scoreDot(std::string word);
RcppExport SEXP _XCTrackerCpp4_scoreDot(SEXP wordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type word(wordSEXP);
    rcpp_result_gen = Rcpp::wrap(scoreDot(word));
    return rcpp_result_gen;
END_RCPP
}
// scoreDotC
std::string scoreDotC(std::string word);
RcppExport SEXP _XCTrackerCpp4_scoreDotC(SEXP wordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type word(wordSEXP);
    rcpp_result_gen = Rcpp::wrap(scoreDotC(word));
    return rcpp_result_gen;
END_RCPP
}
// timeDot
std::string timeDot(std::string word);
RcppExport SEXP _XCTrackerCpp4_timeDot(SEXP wordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type word(wordSEXP);
    rcpp_result_gen = Rcpp::wrap(timeDot(word));
    return rcpp_result_gen;
END_RCPP
}
// timeDotC
std::string timeDotC(std::string word);
RcppExport SEXP _XCTrackerCpp4_timeDotC(SEXP wordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type word(wordSEXP);
    rcpp_result_gen = Rcpp::wrap(timeDotC(word));
    return rcpp_result_gen;
END_RCPP
}
// convertPAMS
void convertPAMS(StringVector lines, List dfResults);
RcppExport SEXP _XCTrackerCpp4_convertPAMS(SEXP linesSEXP, SEXP dfResultsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type lines(linesSEXP);
    Rcpp::traits::input_parameter< List >::type dfResults(dfResultsSEXP);
    convertPAMS(lines, dfResults);
    return R_NilValue;
END_RCPP
}
// removeDistrictNumber
void removeDistrictNumber(StringVector schoolNames);
RcppExport SEXP _XCTrackerCpp4_removeDistrictNumber(SEXP schoolNamesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type schoolNames(schoolNamesSEXP);
    removeDistrictNumber(schoolNames);
    return R_NilValue;
END_RCPP
}
// convertRH
void convertRH(StringVector lines, List dfResults, bool hasRaceNumbers);
RcppExport SEXP _XCTrackerCpp4_convertRH(SEXP linesSEXP, SEXP dfResultsSEXP, SEXP hasRaceNumbersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type lines(linesSEXP);
    Rcpp::traits::input_parameter< List >::type dfResults(dfResultsSEXP);
    Rcpp::traits::input_parameter< bool >::type hasRaceNumbers(hasRaceNumbersSEXP);
    convertRH(lines, dfResults, hasRaceNumbers);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_XCTrackerCpp4_toTime", (DL_FUNC) &_XCTrackerCpp4_toTime, 1},
    {"_XCTrackerCpp4_gradeToInt", (DL_FUNC) &_XCTrackerCpp4_gradeToInt, 1},
    {"_XCTrackerCpp4_inSeconds", (DL_FUNC) &_XCTrackerCpp4_inSeconds, 1},
    {"_XCTrackerCpp4_milePace", (DL_FUNC) &_XCTrackerCpp4_milePace, 2},
    {"_XCTrackerCpp4_timeDifference", (DL_FUNC) &_XCTrackerCpp4_timeDifference, 2},
    {"_XCTrackerCpp4_sumOfFive", (DL_FUNC) &_XCTrackerCpp4_sumOfFive, 1},
    {"_XCTrackerCpp4_placeDot", (DL_FUNC) &_XCTrackerCpp4_placeDot, 1},
    {"_XCTrackerCpp4_placeDotC", (DL_FUNC) &_XCTrackerCpp4_placeDotC, 1},
    {"_XCTrackerCpp4_scoreDot", (DL_FUNC) &_XCTrackerCpp4_scoreDot, 1},
    {"_XCTrackerCpp4_scoreDotC", (DL_FUNC) &_XCTrackerCpp4_scoreDotC, 1},
    {"_XCTrackerCpp4_timeDot", (DL_FUNC) &_XCTrackerCpp4_timeDot, 1},
    {"_XCTrackerCpp4_timeDotC", (DL_FUNC) &_XCTrackerCpp4_timeDotC, 1},
    {"_XCTrackerCpp4_convertPAMS", (DL_FUNC) &_XCTrackerCpp4_convertPAMS, 2},
    {"_XCTrackerCpp4_removeDistrictNumber", (DL_FUNC) &_XCTrackerCpp4_removeDistrictNumber, 1},
    {"_XCTrackerCpp4_convertRH", (DL_FUNC) &_XCTrackerCpp4_convertRH, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_XCTrackerCpp4(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
